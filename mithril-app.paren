(setf mcontainer ((@ document "getElementById") "mroot"))
(setf mapcar (@ *R* map))
(setf obj-values (@ *R* values))
(setf map-obj-indexed (@ *R* map-obj-indexed))

(defun px (n)
  (+ n "px"))

(defun dump (key value)
  (setf (getprop *state* key) value)
  (setf (getprop window key) value)
  )

(defun shot (props)
  (with-slots (x y-jiggle) props
    (m :img (create :src "./assets/pea.png"
                    :class "shot"
                    :style (create :position "absolute"
                                   :float :left
                                   :left (px x)
                                   :margin-top (px y-jiggle))))))

;; It takes 7 shots for the first stage of damage
;; It takes 6 more shots for the second stage
;; and 6 shots more to knock the cone right off
;; For a total of 21 health on a cone
;; Oddly, in pvz the resulting brown-coat has one less health than normal
;; after it's arm falls off (5,4 shots instead of 5,5)
;; but I'm not going to bother with that detail
(defun cone (&optional (health 21))
  (m :img (cond ((< 14 health) (create :class "cone"
                                       :src "./assets/cone.png"))
                ((< 8 health) (create :class "cone damaged"
                                      :src "./assets/cone-2.png"))
                (t            (create :class "cone badly-damaged"
                                      :src "./assets/cone-3.png")))))

(defun mzombie (props)
  (m :div (create :key (@ props :index)
                  :class "zombie"
                  :style (create :left (px (@ props x))
                                 :top (px  (@ props y))
                                 :top-margin (px (@ props y-offset))
                                 :position "absolute"))
     (m :img (create
              :src "./assets/zombie.png"))
     (and (@ props cone) (cone (@ props cone health)))))

(defun peashooter (&optional (props (create :x 250)))
  (m :img (create :key :pea
                  :src "./assets/pea-shooter-pixelated.png"
                  :onclick (lambda (event)
                             (plant-food! props)
                             ((@ event "stopPropagation"))
                             )
                  :style (create :position :absolute
                                 :left (px (@ props x))
                                 :top "25%"))))

(defun mapp ()
  (m "div" (create :id "mapp"  :position "relative")
     (m "div" (create :class-name "row"
                      :onclick #'spawn-zombie!
                      :style (create :position "relative"
                                     :height "140px"
                                     :background-color "#afa"))
        (mapcar peashooter (obj-values (@ *state* plants)))
        (mapcar mzombie (obj-values (@ *state* zombies)))
        (mapcar shot (shots))
        )
     (m "button" (create :onclick #'play-pause) (if (@ *state* running) "Pause" "Play"))
     (and (not (@ *state* running)) (m "button" (create :onclick #'step) "step"))
     (m "button" (create :onclick (@ window spawn-zombie!)) "Spawn Zombie")
     (m "button" (create :onclick (@ window spawn-cone-head!)) "Spawn Cone-Head")
     (m "button" (create :onclick (@ window spawn-plant!)) "Spawn Plant")
     (m "button" (create :onclick (@ window init-state!)) "Reset")
     (m "pre" (create :style (create :position "relative"))
        (chain *JSON* (stringify (create :state *state*
                                         )
                                 nil
                                 2)))
     )
  )

(defun mrender ()
  (chain m (render mcontainer (mapp)))
  )

; UI Glue, depends on react-app.paren
(defun main-loop ()
  (try
   (and (@ *state* running) (step))
   (:finally (request-animation-frame #'main-loop))))

;;;  GO!
(init-state!)
(main-loop)

(defun step ()
  (tick!)
  (mrender))
