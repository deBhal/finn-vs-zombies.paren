((ps:getprop console 'log) "state.paren: Trident is working as expected")

(defvar initial-state
  (create "time" 0
          "zombie" (create-zombie)))

(defvar *shot-speed* 10)

;;; Zombie
(defun create-zombie ()
  (create :x 1200 :health 10))

(defun init-zombie ()
  (setf a-zombie (create-zombie)))

(defun deadp (zombie)
  (or (<= (@ a-zombie x) 0)
      (<= (@ a-zombie health) 0)))

(defun auto-reset-zombie ()
  (if (deadp a-zombie)
      (reset-zombie)))

;;; shot

(defun create-shot (plant)
  (let ((x 70)
        (y 55))
    (create :x x :y y))
  )


(defun update-shot ()
  (setf (@ a-shot x) (+ *shot-speed* (@ a-shot x))))


(defun reset-shot ()
  (setf a-shot (create-shot)))

(defun update-zombie-hit-by-shot ()
  (setf (@ a-zombie health) (- (@ a-zombie health) 1))
  )

(defun auto-reset-shot ()
  (if (<= (@ a-zombie x) (@ a-shot x))
      (progn (update-zombie-hit-by-shot)
             (reset-shot))))


;;; State
(defun init-state ()
  (setf *state* initial-state)
  (init-zombie)
  )

(init-state)

(defun tick ()
  (setf (@ *state* time) (+ 1 (@ *state* time)))
  (setf (@ a-zombie x) (- (@ a-zombie x) 1))
  (update-shot)
  (auto-reset-zombie)
  (auto-reset-shot)
)


(tick)
(save)


(defun reset-zombie ()
  (setf a-zombie (create-zombie)))

(reset-zombie)
