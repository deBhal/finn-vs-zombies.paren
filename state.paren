((ps:getprop console 'log) "state.paren: Trident is working as expected")

(setf zombies (list (create-zombie)))
(defvar initial-state
  (create :title "Finn vs Zombies"
          :running true
          "time" 0
          "zombie" (create-zombie)
          "zombies" (list (create-zombie) (create-zombie :x 800))))

(defvar *shot-speed* 10)

;;; Zombie
(defun create-zombie (&optional (x 1200))
  (create :x x
          :health 10))

(defun init-zombie ()
  (setf a-zombie (create-zombie)))

(defun init-zombies ()
  (setf (@ *state* zombies) (list (create-zombie) (create-zombie 800))))


(defun deadp (zombie)
  (or (<= (@ a-zombie x) 71) ; temporary zombie auto-reset trigger
      (<= (@ a-zombie health) 0)))

(defun auto-reset-zombie ()
  (if (deadp a-zombie)
      (reset-zombie)))

(defun walk ()
  (setf (@ a-zombie x) (- (@ a-zombie x) 1))
  )

(defun reset-zombie ()
  (setf a-zombie (create-zombie)))

;;; shot

(defun create-shot (plant)
  (let ((x 70)
        (y 55))
    (create :x x :y y))
  )


(defun update-shot ()
  (setf (@ a-shot x) (+ *shot-speed* (@ a-shot x))))


(defun reset-shot ()
  (setf a-shot (create-shot)))

(defun update-zombie-hit-by-shot ()
  (setf (@ a-zombie health) (- (@ a-zombie health) 1))
  )

(defun auto-reset-shot ()
  (if (<= (@ a-zombie x) (@ a-shot x))
      (progn (update-zombie-hit-by-shot)
             (reset-shot))))

;;; State
(defun init-state ()
  (setf *state* initial-state)
  (setf a-shot (create :x 120 :y 65))
  (init-zombie)
  (init-zombies)
  (setf (@ *state* reset-zombie) #'reset-zombie)
  )

(defun update-zombie (zombie)
  (setf (@ zombie x) (+ (@ zombie x) 1)))

(defun update-zombies ()
  ;(setf (@ state zombies))
  )

(defun play-pause ()
  (setf (@ *state* running) (not (@ *state* running)))
  )

(init-state)


(walk)
(auto-reset-zombie)

(defun tick ()
  "update all the things"
  (setf (@ *state* time) (+ 1 (@ *state* time)))
  (setf (@ a-zombie x) (- (@ a-zombie x) 1))
  (update-shot)
  (auto-reset-zombie)
  (auto-reset-shot)
)

(tick)

(reset-zombie)

; UI Glue, depends on react-app.paren
(defun main-loop ()
  (if (@ *state* running)
      (progn
        (tick)
        (and (defined render) (render))
        (and (defined mrender) (mrender))
        ))
  (request-animation-frame #'main-loop))

(main-loop)
