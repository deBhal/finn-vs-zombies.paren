((ps:getprop console 'log) "state.paren: Trident is working as expected")

;; external dependencies
(setf mapcar (@ *R* map))

(defun generate-new-zombie-index ()
  (setf (@ *state* zombie-index) (+ 1 (@ *state* zombie-index))))

(defvar initial-state
  (create :title "Finn vs Zombies"
          :running true
          "time" 0
          "zombieIndex" 0
          "zombies" (create)))

(defvar *shot-speed* 10)

;;; Zombie
(defun randomIntBelow (n)
  (chain +Math (floor (* n ((@ +Math random))))))

(defun create-zombie! (&optional (x 1200))
  (let* ((index (generate-new-zombie-index))
         (zombie (create :x x
          :y (- 10 (randomIntBelow 20))
          :health 10
          :index index)))
    (setf (getprop *state* :zombies index) zombie)
    zombie))


(defun init-zombies ()
  (mapcar create-zombie! (list ;0 90 300 600
                               900)))


(defun deadp (zombie)
  (or ;(<= (@ zombie x) 0) ; temporary zombie auto-reset trigger
      (<= (@ zombie health) 0)))

(defun auto-reset-zombie (zombie)
  (if (deadp zombie)
      (reset-zombie zombie)
      zombie))

(defun walk (zombie)
  (setf (@ zombie x) (- (@ zombie x) 1))
  zombie
  )

(defun reset-zombie (zombie)
  ((@ +object assign) zombie (create :x 1200 :health 10)))

;;; shot

(defun create-shot (plant)
  (let ((x 70)
        (y 55))
    (create :x x :y y))
  )


(defun update-shot ()
  (setf (@ a-shot x) (+ *shot-speed* (@ a-shot x))))


(defun reset-shot ()
  (setf a-shot (create-shot)))

(defun update-zombie-hit-by-shot ()
  (setf (@ a-zombie health) (- (@ a-zombie health) 1))
  )

(defun auto-reset-shot ()
  (if (<= 1200 (@ a-shot x)) (reset-shot)
      a-shot))

;;; State
(defun init-state! ()
  (setf *state* (chain +object (assign (create) initial-state)))

  (setf a-shot (create :x 120 :y 65))

  (init-zombie)
  (init-zombies)
  (setf (@ *state* callbacks) (create :create-zombie (lambda () (create-zombie!))))
  *state*
  )

(defun update-zombie (zombie)
  ;; Sorry mutation
  (setf (@ zombie x) (- (@ zombie x) 1))

  (auto-reset-zombie zombie)
  )

(defun update-zombies ()
  (setf (@ *state* zombies) (mapcar update-zombie (@ *state* zombies)))
  )

(defun play-pause ()
  (setf (@ *state* running) (not (@ *state* running)))
  )

(init-state!)

(setf min-by (@ *R* min-by))
(setf prop (@ *R* prop))
(setf reduce (@ *R* reduce))
(setf obj-values (@ *R* values))

(defun left-most (zombies)
  (reduce (min-by (prop :x)) (create :x +infinity) (obj-values zombies)))

(defun calculate-collisions ()
  (let ((collisions '())
        (front-zombie (left-most (@ *state* zombies))))

    (if (<= (@ front-zombie x) (@ a-shot x))
        (progn
          (reset-shot)
          (list (create :shot a-shot :zombie front-zombie)))
        (list))))

(defun process-collision! (collision)
  (with-slots (shot zombie) collision
    (let* ((index (@ zombie :index))
           (the-zombie (getprop *state* :zombies index))
           (health (@ the-zombie :health)))
         (setf (@ *state* 0) (list index health))
    (setf (getprop *state* :zombies index :health) (- health 1)))))

(defun process-collisions! ()
  (mapcar process-collision! (@ *state* :collisions))
  )

(defun tick! ()
  "update all the things"
  (setf (@ *state* time) (+ 1 (@ *state* time)))
  (update-zombies)
  (update-shot)
  (setf (@ *state* :collisions) (calculate-collisions))
  (process-collisions!)
  (auto-reset-shot)
)

(tick!)

; UI Glue, depends on react-app.paren
(defun main-loop ()
  (if (@ *state* running)
      (try (progn
             (tick!)
             (and (defined render) (render))
             (and (defined mrender) (mrender))
             )
           (:finally (request-animation-frame #'main-loop)))))

(main-loop)
