((ps:getprop console 'log) "in state.paren")

;; external dependencies
(import (assoc
         assoc-path
         clone
         complement
         drop
         drop-last
         filter
         find
         find-index
         head
         (head as car)
         is-empty
         keys
         last
         (map as mapcar)
         merge-all
         min-by
         not
         path
         pipe
         prop
         range
         reduce
         reject
         repeat
         tail
         take
         times
         (values as obj-values)
         zip-obj
         )
        from *R*)

;;; In a lispy context, let's not silently ignore all but 2 arguments
(defun merge (&rest args)
  (reduce (@ *R* merge) {} args))

;;; Ramda has a kind of annoying inconsistency to it's treatment of arrays,
;;; notably it will quietly assoc-path through one, but replace it with an
;;  object in it's return value :/
;; (in other places it might work fine or complain)
(defun objectify-array (list)
  (zip-obj (range 0 (@ list length)) list)
  )

(defun create-empty-row ()
  (create :plants (objectify-array (repeat nil 9))
          :zombies (create)
          "shots" (create)))

;;; General Utils
(defvar initial-state
  (create :title "Finn vs Zombies"
          :running true
          "time" 0
          "zombieIndex" 10 ;; save the single-digit values for manually creating mobs
          'zombie-generator (create)
          :rows (objectify-array (times #'create-empty-row 6))
          'constants (create 'plant-shot-cooldown 150
                             'plant-fooded-shot-count 50
                             shot-speed 4
                             turf-width 100
                             )))

(setf default-plant (create x 0
                            index 0
                            types (list :plant :mob)))


(defun get (&rest prop-path)
  ((path prop-path) *state*))

(defun generate-new-mob-index ()
  (setf (@ *state* zombie-index) (+ 1 (@ *state* zombie-index))))

(defun update! (&rest path-then-value)
  "Change the state. The first n arguments are the path to the data to be updated in the state, and the last argument is the new value to store there."
  (let* ((value (last path-then-value))
         (path (drop-last 1 path-then-value)))
    ;; Ugh. assoc-path converts arrays to objects :'(
    ;; https://github.com/ramda/ramda/issues/1332
    (setf *STATE* (assoc-path path value *STATE*))))

(defun constant (key)
  (getprop *STATE* :constants key))

(defun temp-prop (key &optional duration)
  (clog "temp-prop" key)
  "Returns or updates an object like {plantFooded: {at:2018, duration: 200}} suitable for merging into another object (or setting by key)

  The idea is that code that only cares about the property can just check if it's truthy, but it wraps up enough data to clear out the prop later."
  (let ((prop-duration (if (defined duration)
                      duration
                      (default-duration key))))
    (assoc key
           (create :at (time)
                   :duration prop-duration)
           (create))))

(defun is-expired-temp-prop (obj)
  (and obj
       (with-slots (at duration) obj
         (<= (+ at duration) (time)))))

(defun filter-out-expired-temp-props (obj)
  (reject #'is-expired-temp-prop obj))

(defun default-duration (key)
  (or (get 'default-durations key) (get 'default-durations 'default)))

;;; Zombie
(defun random-int-below (n)
  (chain +Math (floor (* n ((@ +Math random))))))

(defun plus-or-minus (n)
  (- n (random-int-below (+ 1 (* 2 n)))))

(defun create-zombie (&optional x)
  (let* ((x (if ((@ +Number is-finite) x) x (* 9 (constant 'turf-width))))
         (index (generate-new-mob-index)))
    (create :x x
            :y (plus-or-minus 5)
            :health 10
            :index index)))

(defun spawn-zombie! (&optional row x)
  (let* ((row (if (defined row) row (random-row)))
         (zombie (create-zombie x)))
    (setf (getprop *state* :rows row :zombies (@ zombie index))
          (assoc :row row
                 zombie))))

(defun spawn-conehead! (row &optional x)
  (let ((zombie (spawn-zombie! row x)))
    (with-slots (index) zombie
      (update! 'rows (-number row) 'zombies index
               (merge zombie
                      (create :cone (create :health 21)))))))

(defun create-enemy (type)
  (case type
    (:cone (merge (create-zombie)
                  (create :cone (create :health 21))))
    (t (create-zombie))))

(defun spawn! (zombie &optional row)
  (let* ((row (if (defined row) row (random-row))))
    (setf (getprop *state* :rows row :zombies (@ zombie index))
          (assoc :row row zombie))))

(defun spawn-shot! (plant)
  (let* ((index (generate-new-mob-index))
         (plant-x (or (and plant (@ plant x)) 0))
         (x (+ plant-x 55))
         (row (@ plant row)))
    (setf (getprop *state* :rows row :shots index)
          (create x x
                  y-jiggle (plus-or-minus 5)
                  shooter-id index
                  index index))))

(defun spawn-plant! (&optional (column 0) (row 0))
  (let* ((mob-index (generate-new-mob-index)))
    (setf (getprop *state* :rows row :plants column)
          (merge default-plant (create x (+ 25 (* column (constant 'turf-width)) 0)
                                       index mob-index
                                       column column
                                       row row)))))

(defun time () (@ *STATE* time))

(defun plant-food! (column row)
  (setf (plant column row)
        (merge (plant column row)
               (temp-prop 'plant-fooded))))

(defun init-zombies ()
  (mapcar spawn-zombie! (list ;0 90 300 600
                               900)))

(defun alivep (zombie)
  ;; ironically, we're going to consider undefined and false "alive"
  (or (not zombie)
      (not (or (and (defined (@ zombie health))
                    (<= (@ zombie health) 0))
               ;; for now, kill anything that is out of bounds
               (and (defined (@ zombie x))
                    (or (<= (@ zombie x) -100)
                        (<= 1300 (@ zombie x))))
               (@ zombie :dead)))))

(defun walk (zombie)
  (setf (@ zombie x) (- (@ zombie x) 1))
  zombie
  )

(defun plant-fooded-shot-cooldown ()
  (/ (default-duration 'plant-fooded) (constant 'plant-fooded-shot-count)))

(defun shot-is-cool (plant)
  (with-slots (time-of-last-shot) (merge default-plant plant)
    (let* ((current-time (@ *state* time))
           (time-since-last-shot (- current-time time-of-last-shot))
           (cooldown (if (plant-food-activep plant)
                         (plant-fooded-shot-cooldown)
                         (constant 'plant-shot-cooldown))))
      (or (not time-of-last-shot)
          (<= cooldown time-since-last-shot)))))

(defun plant-food-activep (plant)
  (getprop plant 'plant-fooded))

(defun update-row (row)
  (with-slots (plants zombies shots) row
    (let* ((plants     (mapcar #'update-turf plants))
           (zombies    (update-zombies zombies))
           (shots      (mapcar #'update-shot shots))
           (collisions (calculate-collisions row))
           (new-row    (create 'plants plants
                               'zombies zombies
                               'shots shots
                               'collisions collisions)))
      (mapcar (filter alivep)
              (process-collisions new-row collisions)
              ))
    )
  )

(defun update-turf (turf)
  (and turf
       (update-plant turf)))

(defun plant (column row)
  (getprop *state* :rows row :plants column))
(defun set-plant! (column row value)
  ;; To merge or not to merge...
  ;; Not merging for now
  ;; Also going to listen to the column and row for the setf semantics
  (setf (getprop *state* :rows row :plants column) value))
(defsetf plant set-plant!)

(defun save-plant! (plant)
  (with-slots (column row) plant
    (setf (plant column row) plant)))


(defun update-plant (plant)
  (if (not plant)
      plant
      (let ((plant (filter-out-expired-temp-props plant)))
        (with-slots (x index time-of-last-shot plant-fooded row) (merge default-plant plant)
          (let* ((current-time (@ *state* time))
                 (time-since-last-shot (- current-time time-of-last-shot))
                 (my-row (getprop *state* :rows row))
                 (has-target (not (is-empty (@ my-row zombies))))
                 (wants-to-shoot (or has-target
                                     plant-fooded))
                 (should-shoot (and wants-to-shoot
                                    (shot-is-cool plant)))
                 (derived-props (create should-shoot should-shoot
                                        time-since-last-shot time-since-last-shot
                                        current-time current-time
                                        wants-to-shoot wants-to-shoot
                                        has-target has-target
                                                     )))
            (merge-all (list (filter-out-expired-temp-props plant)
;                             (create derived derived-props)
                             (and should-shoot
                                  (progn
                                    (spawn-shot! plant)
                                    (merge (create time-of-last-shot current-time)
                                           (temp-prop :shooting 10)))))))))))

(defun update-shot (a-shot)
  (setf (@ a-shot x) (+ (constant 'shot-speed) (@ a-shot x)))
  a-shot)

(defun init-zombie-generator ()
  (create 'wave-count 0
          'zombies-spawned 0
          'zombie-queue (list)))
;;; State
(defun init-state! ()
  ;; I only need this clone because I'm a naughty mutator :p
  (let ((preserved-running (if (and (defined *state*)
                                    (defined (@ *state* running)))
                             (@ *state* running)
                             (@ initial-state running)))))
  (setf *state* (clone initial-state))
  (update! 'running preserved-running)
  (setf (@ *state* callbacks) (create :spawn-zombie (lambda () (spawn-zombie!))))
  (update! 'constants 'plant-fooded-shot-count 50)
  (update! 'constants 'shot-speed 2)
  (update! 'constants 'turf-width 100)
  (update! 'constants 'zombie-walking-speed 0.05)
  (update! 'constants 'plant-shot-cooldown (/ 30 (constant 'zombie-walking-speed)))
  (set-constant 'pause-between-zombies (/ 30 (constant 'zombie-walking-speed)))
  (update! 'default-durations 'default 200)
  (update! 'default-durations 'plant-fooded 100)
  (update! 'default-durations 'cooldown-queue-zombies (/ 400 (constant 'zombie-walking-speed)))
  ;; Magic init?
  (update! 'zombie-generator (init-zombie-generator))
  *state*
  )

(defun set-constant (key value)
  "Ah, delicious irony"
  (update! 'constants key value)
  )

(defun update-zombie (zombie)
  ;; Sorry mutation
  (setf (@ zombie x) (- (@ zombie x) (constant 'zombie-walking-speed)))
  ;; Strip armour, not checking the zombie itself
  (filter alivep zombie)
  )

(defun update-zombies (zombies)
  (filter alivep
          (mapcar #'update-zombie zombies)))

(defun pause ()
  (setf (@ *state* running) false)
  ;; Heh. We need an extra render here to render a pause-specific "step" button
  (mrender))

(defun play-pause ()
  (if (@ *state* running) (pause)
      (setf (@ *state* running) true)))

(defun left-most (zombies)
  (let* ((zombies (obj-values zombies)))
    (reduce (min-by (prop :x)) (head zombies) (tail zombies))))

(defun calculate-collisions (row)
  (with-slots (zombies shots) row
    (let ((front-zombie (left-most zombies)))
      (if front-zombie (progn
                         (setf (@ row front-zombie) front-zombie)
                         (loop for a-shot in (obj-values shots)
                            when (<= (@ front-zombie x) (@ a-shot x))
                            collect (create :shot a-shot :zombie front-zombie :row row)))
          (list)))))

(defun find-armor (mob)
  "Returns a path to the health that should be decremented e.g. a plant's health, or a zombie's bucket"
  (cond ((@ mob cone) (list 'cone 'health))
        ((@ mob bucket) (list 'bucket 'health))
        (t (list 'health))))

(defun hurt (mob &optional (damage 1))
  "Subtract damage from the mobs health (or bucket)"
  (let* ((health-path (find-armor mob))
         (health (path health-path mob)))
    (assoc-path health-path (- health damage) mob)))

(defun process-collision (row collision)
  (with-slots (shot zombie row) collision
    (let* ((zombie-id (@ zombie :index))
           (the-zombie (getprop row :zombies zombie-id))
           (shot-id (@ shot :index)))
      (setf (getprop row :zombies zombie-id) (hurt the-zombie))
      (setf (getprop row :shots shot-id :dead) t)
      row)
    ))

(defun process-collisions (row collisions)
  (reduce #'process-collision row collisions)
  )

(setf #'filter-dead (filter ((@ *R* negate) (prop :dead))))

(defun find-zombie ()
  (find (complement is-empty)
        (obj-values (mapcar (pipe (prop :zombies)) (@ *state* rows)))))

(defun random-row ()
  (random-int-below (chain (keys (@ *state* :rows)) length)))

(defun queue-zombies (zombie-generator)
  (with-slots (cooldown-queue-zombies zombie-queue wave-count)
      (filter-out-expired-temp-props zombie-generator)
    (if (and cooldown-queue-zombies (find-zombie))
        zombie-generator
        (merge zombie-generator
               (temp-prop 'cooldown-queue-zombies)
               (create zombie-queue (concat zombie-queue (list t t t :cone))
                       wave-count (+ 1 wave-count))))))

;;; I can't decide if this is part of a pipeline or should be OO
(defun generate-zombie (zombie-generator)
  (with-slots (pause-between-zombies zombie-queue zombies-spawned) zombie-generator
    (if (or pause-between-zombies (is-empty zombie-queue))
        zombie-generator
        (let ((new-zombie-type (car zombie-queue))
              (row (random-row)))
          (spawn! (create-enemy new-zombie-type) row)
               (merge zombie-generator
                      (temp-prop 'pause-between-zombies)
                      (create 'zombies-spawned (+ 1 zombies-spawned)
                              'zombie-queue (drop 1 zombie-queue)))))))

(defun update-zombie-generator (zombie-generator)
  ((pipe #'filter-out-expired-temp-props #'queue-zombies #'generate-zombie) zombie-generator))

(defun tick! ()
  "update all the things"
  (setf (@ *state* time) (+ 1 (@ *state* time)))

  (setf (@ *state* :rows) (mapcar #'update-row (@ *state* :rows)))
  (setf (@ *state* 'zombie-generator) (update-zombie-generator (@ *state* 'zombie-generator)))
  *state*
  )
